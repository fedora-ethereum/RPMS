From: antazoey <jules@apeworx.io>
Date: Wed, 5 Jun 2024 10:11:53 -0500
Subject: [PATCH] feat!: 3.8 drop and upgrade eth dependencies (#45)

Co-authored-by: iamdefinitelyahuman <35276322+iamdefinitelyahuman@users.noreply.github.com>
Co-authored-by: El De-dog-lo <3859395+fubuloubu@users.noreply.github.com>
Co-authored-by: NotPeopling2day <32708219+NotPeopling2day@users.noreply.github.com>

diff --git a/.github/PULL_REQUEST_TEMPLATE.md b/.github/PULL_REQUEST_TEMPLATE.md
index 544cbc6..1f9069c 100644
--- a/.github/PULL_REQUEST_TEMPLATE.md
+++ b/.github/PULL_REQUEST_TEMPLATE.md
@@ -10,7 +10,8 @@ fixes: #
 
 ### Checklist
 
-- [ ] Passes all linting checks (pre-commit and CI jobs)
-- [ ] New test cases have been added and are passing
+<!-- All PRs must complete the following checklist before being merged -->
+
+- [ ] All changes are completed
+- [ ] New test cases have been added
 - [ ] Documentation has been updated
-- [ ] PR title follows [Conventional Commit](https://www.conventionalcommits.org/en/v1.0.0/) standard (will be automatically included in the changelog)
diff --git a/.github/workflows/codeql.yaml b/.github/workflows/codeql.yaml
index 2cdc07b..eb3711c 100644
--- a/.github/workflows/codeql.yaml
+++ b/.github/workflows/codeql.yaml
@@ -20,7 +20,7 @@ jobs:
 
     steps:
     - name: Checkout repository
-      uses: actions/checkout@v3
+      uses: actions/checkout@v4
 
     - name: Initialize CodeQL
       uses: github/codeql-action/init@v2
diff --git a/.github/workflows/commitlint.yaml b/.github/workflows/commitlint.yaml
index d804cb4..4ee3ef5 100644
--- a/.github/workflows/commitlint.yaml
+++ b/.github/workflows/commitlint.yaml
@@ -9,12 +9,12 @@ jobs:
         runs-on: ubuntu-latest
 
         steps:
-        - uses: actions/checkout@v3
+        - uses: actions/checkout@v4
           with:
               fetch-depth: 0
 
         - name: Setup Python
-          uses: actions/setup-python@v4
+          uses: actions/setup-python@v5
           with:
               python-version: "3.10"
 
diff --git a/.github/workflows/docs.yaml b/.github/workflows/docs.yaml
index 0c9316e..ba61a56 100644
--- a/.github/workflows/docs.yaml
+++ b/.github/workflows/docs.yaml
@@ -16,10 +16,10 @@ jobs:
             contents: write
 
         steps:
-        - uses: actions/checkout@v3
+        - uses: actions/checkout@v4
 
         - name: Setup Python
-          uses: actions/setup-python@v4
+          uses: actions/setup-python@v5
           with:
               python-version: "3.10"
 
diff --git a/.github/workflows/prtitle.yaml b/.github/workflows/prtitle.yaml
index a6cd3b0..6e8999f 100644
--- a/.github/workflows/prtitle.yaml
+++ b/.github/workflows/prtitle.yaml
@@ -12,10 +12,10 @@ jobs:
         runs-on: ubuntu-latest
 
         steps:
-        - uses: actions/checkout@v3
+        - uses: actions/checkout@v4
 
         - name: Setup Python
-          uses: actions/setup-python@v4
+          uses: actions/setup-python@v5
           with:
               python-version: "3.10"
 
diff --git a/.github/workflows/publish.yaml b/.github/workflows/publish.yaml
index 2c88013..081d138 100644
--- a/.github/workflows/publish.yaml
+++ b/.github/workflows/publish.yaml
@@ -10,10 +10,10 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-    - uses: actions/checkout@v3
+    - uses: actions/checkout@v4
 
     - name: Set up Python
-      uses: actions/setup-python@v4
+      uses: actions/setup-python@v5
       with:
         python-version: "3.10"
 
diff --git a/.mdformat.toml b/.mdformat.toml
deleted file mode 100644
index 01b2fb0..0000000
--- a/.mdformat.toml
+++ /dev/null
@@ -1 +0,0 @@
-number = true
diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index e15dfcf..7196e53 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -1,6 +1,6 @@
 repos:
 -   repo: https://github.com/pre-commit/pre-commit-hooks
-    rev: v4.5.0
+    rev: v4.6.0
     hooks:
     -   id: check-yaml
 
@@ -10,18 +10,18 @@ repos:
       - id: isort
 
 -   repo: https://github.com/psf/black
-    rev: 23.12.0
+    rev: 24.4.2
     hooks:
       - id: black
         name: black
 
 -   repo: https://github.com/pycqa/flake8
-    rev: 6.1.0
+    rev: 7.0.0
     hooks:
     -   id: flake8
 
 -   repo: https://github.com/pre-commit/mirrors-mypy
-    rev: v1.7.1
+    rev: v1.10.0
     hooks:
     -   id: mypy
         additional_dependencies: [types-setuptools, pydantic]
diff --git a/README.md b/README.md
index 938ae43..914ab42 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@ See [EIP-712](https://eips.ethereum.org/EIPS/eip-712) for details.
 
 ## Dependencies
 
-- [python3](https://www.python.org/downloads) version 3.8 up to 3.12.
+- [python3](https://www.python.org/downloads) version 3.9 up to 3.12.
 
 ## Installation
 
diff --git a/eip712/common.py b/eip712/common.py
index 685a9fa..5c8dd61 100644
--- a/eip712/common.py
+++ b/eip712/common.py
@@ -85,7 +85,7 @@ def create_safe_tx_def(
     version: str = "1.3.0",
     contract_address: Optional[str] = None,
     chain_id: Optional[int] = None,
-) -> Type[SafeTx]:
+) -> type[SafeTx]:
     if not contract_address:
         raise ValueError("Must define 'contract_address'")
 
diff --git a/eip712/messages.py b/eip712/messages.py
index a207e5c..9739fe2 100644
--- a/eip712/messages.py
+++ b/eip712/messages.py
@@ -1,10 +1,11 @@
 """
 Message classes for typed structured data hashing and signing in Ethereum.
 """
-from typing import Any, Dict, Optional
+
+from typing import Any, Optional
 
 from dataclassy import asdict, dataclass, fields
-from eth_abi import is_encodable_type
+from eth_abi.abi import is_encodable_type  # type: ignore[import-untyped]
 from eth_account.messages import SignableMessage, hash_domain, hash_eip712_message
 from eth_utils import keccak
 from eth_utils.curried import ValidationError
@@ -45,7 +46,7 @@ class EIP712Type:
         Recursively built ``dict`` (name of type ``->`` list of subtypes) of
         the underlying fields' types.
         """
-        types: Dict[str, list] = {repr(self): []}
+        types: dict[str, list] = {repr(self): []}
 
         for field in fields(self.__class__):
             value = getattr(self, field)
@@ -157,8 +158,8 @@ def calculate_hash(msg: SignableMessage) -> HexBytes:
     return HexBytes(keccak(b"".join([bytes.fromhex("19"), *msg])))
 
 
-def _prepare_data_for_hashing(data: Dict) -> Dict:
-    result: Dict = {}
+def _prepare_data_for_hashing(data: dict) -> dict:
+    result: dict = {}
 
     for key, value in data.items():
         item: Any = value
diff --git a/pyproject.toml b/pyproject.toml
index 670f2ab..3cf4d45 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -35,3 +35,6 @@ force_grid_wrap = 0
 include_trailing_comma = true
 multi_line_output = 3
 use_parentheses = true
+
+[tool.mdformat]
+number = true
diff --git a/setup.py b/setup.py
index 04bd584..8c22dbc 100644
--- a/setup.py
+++ b/setup.py
@@ -10,14 +10,15 @@ extras_require = {
         "hypothesis>=6.70.0,<7",  # Strategy-based fuzzer
     ],
     "lint": [
-        "black>=23.12.0,<24",  # auto-formatter and linter
-        "mypy>=1.7.1,<2",  # Static type analyzer
+        "black>=24.4.2,<25",  # auto-formatter and linter
+        "mypy>=1.10.0,<2",  # Static type analyzer
         "types-setuptools",  # Needed for mypy type shed
-        "flake8>=6.1.0,<7",  # Style linter
+        "flake8>=7.0.0,<8",  # Style linter
         "isort>=5.12.0,<6",  # Import sorting linter
         "mdformat>=0.7.17,<0.8",  # Auto-formatter for markdown
         "mdformat-gfm>=0.3.5,<0.4",  # Needed for formatting GitHub-flavored markdown
         "mdformat-frontmatter>=0.4.1,<0.5",  # Needed for headers in GH issue templates
+        "mdformat-pyproject>=0.0.1",  # Allows configuring in pyproject.toml
     ],
     "release": [  # `release` GitHub Action job uses this
         "setuptools",  # Installation tool
@@ -64,15 +65,14 @@ setup(
     url="https://github.com/ApeWorX/eip712",
     include_package_data=True,
     install_requires=[
-        "dataclassy>=0.8.2,<1",
+        "dataclassy>=0.11.1,<1",
         "eth-abi>=5.1.0,<6",
-        "eth-account>=0.10.0,<0.12",
-        "eth-hash[pycryptodome]",  # NOTE: Pinned by eth-abi
-        "eth-typing>=3.5.2,<4",
-        "eth-utils>=2.3.1,<3",
-        "hexbytes>=0.3.0,<1",
+        "eth-account>=0.12.1,<0.13",
+        "eth-typing>=4.1.0,<5",
+        "eth-utils>=4.1.0,<5",
+        "hexbytes>=1.2.0,<2",
     ],
-    python_requires=">=3.8,<4",
+    python_requires=">=3.9,<4",
     extras_require=extras_require,
     py_modules=["eip712"],
     license="Apache-2.0",
@@ -88,7 +88,6 @@ setup(
         "Operating System :: MacOS",
         "Operating System :: POSIX",
         "Programming Language :: Python :: 3",
-        "Programming Language :: Python :: 3.8",
         "Programming Language :: Python :: 3.9",
         "Programming Language :: Python :: 3.10",
         "Programming Language :: Python :: 3.11",
diff --git a/tests/test_common.py b/tests/test_common.py
index 7a950ce..d7de792 100644
--- a/tests/test_common.py
+++ b/tests/test_common.py
@@ -20,9 +20,9 @@ def test_gnosis_safe_tx(version):
     msg = tx_def(to=MAINNET_MSIG_ADDRESS, nonce=0)
 
     assert msg.signable_message.header.hex() == (
-        "0x88fbc465dedd7fe71b7baef26a1f46cdaadd50b95c77cbe88569195a9fe589ab"
+        "88fbc465dedd7fe71b7baef26a1f46cdaadd50b95c77cbe88569195a9fe589ab"
         if version in ("1.3.0",)
-        else "0x590e9c66b22ee4584cd655fda57748ce186b85f829a092c28209478efbe86a92"
+        else "590e9c66b22ee4584cd655fda57748ce186b85f829a092c28209478efbe86a92"
     )
 
     assert hash_message(msg).hex() == (
diff --git a/tests/test_messages.py b/tests/test_messages.py
index e8839d3..eab7ddd 100644
--- a/tests/test_messages.py
+++ b/tests/test_messages.py
@@ -10,9 +10,9 @@ from .conftest import (
 
 def test_multilevel_message(valid_message_with_name_domain_field):
     msg = valid_message_with_name_domain_field.signable_message
-    assert msg.version.hex() == "0x01"
-    assert msg.header.hex() == "0x336a9d2b32d1ab7ea7bbbd2565eca1910e54b74843858dec7a81f772a3c17e17"
-    assert msg.body.hex() == "0x306af87567fa87e55d2bd925d9a3ed2b1ec2c3e71b142785c053dc60b6ca177b"
+    assert msg.version.hex() == "01"
+    assert msg.header.hex() == "336a9d2b32d1ab7ea7bbbd2565eca1910e54b74843858dec7a81f772a3c17e17"
+    assert msg.body.hex() == "306af87567fa87e55d2bd925d9a3ed2b1ec2c3e71b142785c053dc60b6ca177b"
 
 
 def test_invalid_message_without_domain_fields():
