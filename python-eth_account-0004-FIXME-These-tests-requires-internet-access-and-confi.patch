From: Peter Lemenkov <lemenkov@gmail.com>
Date: Tue, 5 Nov 2024 13:59:16 +0300
Subject: [PATCH] FIXME These tests requires internet access and configured
 Node.js

Signed-off-by: Peter Lemenkov <lemenkov@gmail.com>

diff --git a/tests/integration/test_comparison_js_eip712_signing.py b/tests/integration/test_comparison_js_eip712_signing.py
deleted file mode 100644
index 9c5f6ad..0000000
--- a/tests/integration/test_comparison_js_eip712_signing.py
+++ /dev/null
@@ -1,111 +0,0 @@
-import json
-import subprocess
-
-import pytest
-
-from eth_account import (
-    Account,
-)
-from eth_account.messages import (
-    encode_typed_data,
-)
-from tests.eip712_messages import (
-    VALID_FOR_ALL,
-    VALID_FOR_PY_AND_ETHERS,
-    VALID_FOR_PY_AND_METAMASK,
-    convert_to_3_arg,
-)
-
-TEST_KEY = "756e69636f726e73756e69636f726e73756e69636f726e73756e69636f726e73"
-py_account = Account.from_key(TEST_KEY)
-
-
-def get_js_sig(message, library):
-    message_stringify = json.dumps(message)
-    sig = subprocess.run(
-        [
-            "node",
-            f"tests/integration/js-scripts/sign-eip712-with-{library}",
-            message_stringify,
-            TEST_KEY,
-        ],
-        capture_output=True,
-    )
-    return sig.stdout.decode("utf-8").strip()
-
-
-@pytest.mark.compatibility
-@pytest.mark.parametrize("message_title", VALID_FOR_ALL)
-def test_messages_where_all_3_sigs_match(message_title):
-    message = VALID_FOR_ALL[message_title]
-
-    ethers_sig = get_js_sig(message, "ethers")
-    metamask_sig = get_js_sig(message, "metamask")
-
-    try:
-        signable_1 = encode_typed_data(full_message=message)
-        py_signed_1 = py_account.sign_message(signable_1)
-        py_one_arg = py_signed_1.signature.to_0x_hex()
-    except Exception:
-        py_one_arg = "py_one_arg signing failed"
-
-    try:
-        signable_3 = encode_typed_data(*convert_to_3_arg(message))
-        py_signed_3 = py_account.sign_message(signable_3)
-        py_three_arg = py_signed_3.signature.to_0x_hex()
-    except Exception:
-        py_three_arg = "py_three_arg signing failed"
-
-    assert py_one_arg == py_three_arg == ethers_sig == metamask_sig
-
-
-@pytest.mark.compatibility
-@pytest.mark.parametrize("message_title", VALID_FOR_PY_AND_ETHERS)
-def test_messages_where_eth_account_matches_ethers_but_not_metamask(message_title):
-    message = VALID_FOR_PY_AND_ETHERS[message_title]
-
-    ethers_sig = get_js_sig(message, "ethers")
-    metamask_sig = get_js_sig(message, "metamask")
-
-    try:
-        signable_1 = encode_typed_data(full_message=message)
-        py_signed_1 = py_account.sign_message(signable_1)
-        py_one_arg = py_signed_1.signature.to_0x_hex()
-    except Exception:
-        py_one_arg = "py_one_arg signing failed"
-
-    try:
-        signable_3 = encode_typed_data(*convert_to_3_arg(message))
-        py_signed_3 = py_account.sign_message(signable_3)
-        py_three_arg = py_signed_3.signature.to_0x_hex()
-    except Exception:
-        py_three_arg = "py_three_arg signing failed"
-
-    assert py_one_arg == py_three_arg == ethers_sig
-    assert py_one_arg != metamask_sig
-
-
-@pytest.mark.compatibility
-@pytest.mark.parametrize("message_title", VALID_FOR_PY_AND_METAMASK)
-def test_messages_where_eth_account_matches_metamask_but_not_ethers(message_title):
-    message = VALID_FOR_PY_AND_METAMASK[message_title]
-
-    ethers_sig = get_js_sig(message, "ethers")
-    metamask_sig = get_js_sig(message, "metamask")
-
-    try:
-        signable_1 = encode_typed_data(full_message=message)
-        py_signed_1 = py_account.sign_message(signable_1)
-        py_one_arg = py_signed_1.signature.to_0x_hex()
-    except Exception:
-        py_one_arg = "py_one_arg signing failed"
-
-    try:
-        signable_3 = encode_typed_data(*convert_to_3_arg(message))
-        py_signed_3 = py_account.sign_message(signable_3)
-        py_three_arg = py_signed_3.signature.to_0x_hex()
-    except Exception:
-        py_three_arg = "py_three_arg signing failed"
-
-    assert py_one_arg == py_three_arg == metamask_sig
-    assert py_one_arg != ethers_sig
diff --git a/tests/integration/test_ethers_fuzzing.py b/tests/integration/test_ethers_fuzzing.py
deleted file mode 100644
index a16c6cf..0000000
--- a/tests/integration/test_ethers_fuzzing.py
+++ /dev/null
@@ -1,59 +0,0 @@
-import subprocess
-
-from hypothesis import (
-    given,
-    settings,
-    strategies as st,
-)
-import pytest
-
-from eth_account import (
-    Account,
-)
-from eth_account.hdaccount.mnemonic import (
-    VALID_ENTROPY_SIZES,
-    Mnemonic,
-)
-
-Account.enable_unaudited_hdwallet_features()
-
-language_st = st.sampled_from(Mnemonic.list_languages())
-
-seed_st = (
-    st.binary(min_size=min(VALID_ENTROPY_SIZES), max_size=max(VALID_ENTROPY_SIZES))
-    .filter(lambda x: len(x) in VALID_ENTROPY_SIZES)
-    .filter(lambda s: int.from_bytes(s, byteorder="big") != 0)
-)
-
-node_st = st.tuples(st.integers(min_value=0, max_value=2**31 - 1), st.booleans())
-path_st = (
-    st.lists(node_st, min_size=0, max_size=10)
-    .map(lambda nodes: list(str(n[0]) + ("" if n[1] else "'") for n in nodes))
-    .map(lambda nodes: "m" + ("/" + "/".join(nodes) if nodes else ""))
-)
-
-
-@given(seed=seed_st, language=language_st, account_path=path_st)
-@settings(deadline=1000)
-@pytest.mark.compatibility
-def test_compatibility(seed, language, account_path):
-    mnemonic = Mnemonic(language).to_mnemonic(seed)
-    acct = Account.from_mnemonic(mnemonic, account_path=account_path)
-    # NOTE Must do `cd tests/integration/js-scripts && npm install -g .
-    ethers_cli = subprocess.run(
-        [
-            "node",
-            "tests/integration/js-scripts/ethers-mnemonic-fuzzing",
-            "-m",
-            mnemonic,
-            "-l",
-            language,
-            "-p",
-            account_path,
-        ],
-        capture_output=True,
-    )
-    if ethers_cli.stderr:
-        raise OSError(ethers_cli.stderr.decode("utf-8"))
-    ethers_address = ethers_cli.stdout.decode("utf-8").strip()
-    assert acct.address == ethers_address
