From: Peter Lemenkov <lemenkov@gmail.com>
Date: Wed, 8 Feb 2023 11:48:38 +0100
Subject: [PATCH] Revert "Stop checking for jsoncpp version"

This reverts commit e9d8bbb62469d150341c5d13c684e2878aa04a8e.

diff --git a/libsolidity/lsp/SemanticTokensBuilder.cpp b/libsolidity/lsp/SemanticTokensBuilder.cpp
index 685cb118d..dae48c1b5 100644
--- a/libsolidity/lsp/SemanticTokensBuilder.cpp
+++ b/libsolidity/lsp/SemanticTokensBuilder.cpp
@@ -50,7 +50,7 @@ optional<SemanticTokenType> semanticTokenTypeForType(frontend::Type const* _type
 	case frontend::Type::Category::Struct: return SemanticTokenType::Struct;
 	case frontend::Type::Category::Contract: return SemanticTokenType::Class;
 	default:
-		//lspDebug(fmt::format("semanticTokenTypeForType: unknown category: {}", static_cast<unsigned>(_type->category())));
+		lspDebug(fmt::format("semanticTokenTypeForType: unknown category: {}", static_cast<unsigned>(_type->category())));
 		return SemanticTokenType::Type;
 	}
 }
@@ -119,7 +119,7 @@ void SemanticTokensBuilder::encode(
 	auto const [line, startChar] = m_charStream->translatePositionToLineColumn(_sourceLocation.start);
 	auto const length = _sourceLocation.end - _sourceLocation.start;
 
-	//lspDebug(fmt::format("encode [{}:{}..{}] {}", line, startChar, length, _tokenType));
+	lspDebug(fmt::format("encode [{}:{}..{}] {}", line, startChar, length, _tokenType));
 
 	m_encodedTokens.append(line - m_lastLine);
 	if (line == m_lastLine)
@@ -209,9 +209,9 @@ void SemanticTokensBuilder::endVisit(frontend::Identifier const& _identifier)
 
 void SemanticTokensBuilder::endVisit(frontend::IdentifierPath const& _node)
 {
-	//lspDebug(fmt::format("IdentifierPath: identifier path [{}..{}]", _node.location().start, _node.location().end));
-	//for (size_t i = 0; i < _node.path().size(); ++i)
-	//	lspDebug(fmt::format("  [{}]: {}", i, _node.path().at(i)));
+	lspDebug(fmt::format("IdentifierPath: identifier path [{}..{}]", _node.location().start, _node.location().end));
+	for (size_t i = 0; i < _node.path().size(); ++i)
+		lspDebug(fmt::format("  [{}]: {}", i, _node.path().at(i)));
 	if (dynamic_cast<EnumDefinition const*>(_node.annotation().referencedDeclaration))
 		encode(_node.location(), SemanticTokenType::EnumMember);
 	else
@@ -220,7 +220,7 @@ void SemanticTokensBuilder::endVisit(frontend::IdentifierPath const& _node)
 
 bool SemanticTokensBuilder::visit(frontend::MemberAccess const& _node)
 {
-	//lspDebug(fmt::format("[{}..{}] MemberAccess({}): {}", _node.location().start, _node.location().end, _node.annotation().referencedDeclaration ?  _node.annotation().referencedDeclaration->name() : "?", _node.memberName()));
+	lspDebug(fmt::format("[{}..{}] MemberAccess({}): {}", _node.location().start, _node.location().end, _node.annotation().referencedDeclaration ?  _node.annotation().referencedDeclaration->name() : "?", _node.memberName()));
 
 	auto const memberNameLength = static_cast<int>(_node.memberName().size());
 	auto const memberTokenType = semanticTokenTypeForExpression(_node.annotation().type);
@@ -267,7 +267,7 @@ bool SemanticTokensBuilder::visit(frontend::UserDefinedTypeName const& _node)
 
 bool SemanticTokensBuilder::visit(frontend::VariableDeclaration const& _node)
 {
-	//lspDebug(fmt::format("VariableDeclaration: {}", _node.name()));
+	lspDebug(fmt::format("VariableDeclaration: {}", _node.name()));
 
 	if (auto const token = semanticTokenTypeForType(_node.typeName().annotation().type); token.has_value())
 		encode(_node.typeName().location(), *token);
diff --git a/libsolutil/JSON.cpp b/libsolutil/JSON.cpp
index f8b76b4d7..d27982acb 100644
--- a/libsolutil/JSON.cpp
+++ b/libsolutil/JSON.cpp
@@ -32,6 +32,11 @@
 
 using namespace std;
 
+static_assert(
+	(JSONCPP_VERSION_MAJOR == 1) && (JSONCPP_VERSION_MINOR == 9) && (JSONCPP_VERSION_PATCH == 3),
+	"Unexpected jsoncpp version: " JSONCPP_VERSION_STRING ". Expecting 1.9.3."
+);
+
 namespace solidity::util
 {
 
