From: Peter Lemenkov <lemenkov@gmail.com>
Date: Sat, 10 Feb 2024 11:46:19 +0100
Subject: [PATCH] Fix failing tests

Signed-off-by: Peter Lemenkov <lemenkov@gmail.com>

diff --git a/tests/test_abi.py b/tests/test_abi.py
index 04a4118..c8c7931 100644
--- a/tests/test_abi.py
+++ b/tests/test_abi.py
@@ -4,23 +4,23 @@ import pytest
 
 from eth_event import ABIError, get_log_topic, get_topic_map
 
-
+@pytest.fixture
 def test_get_log_topic(abi):
     for i in [i for i in abi if not i["anonymous"]]:
         get_log_topic(i)
 
-
+@pytest.fixture
 def test_get_log_topic_anonymous(abi):
     for i in [i for i in abi if i["anonymous"]]:
         with pytest.raises(ABIError):
             get_log_topic(i)
 
-
+@pytest.fixture
 def test_get_log_topic_contract_abi(abi):
     with pytest.raises(TypeError):
         get_log_topic(abi)
 
-
+@pytest.fixture
 def test_event_abi(abi):
     result = get_topic_map(abi)
     assert len(result) + 2 == len(abi)
diff --git a/tests/test_decode_event.py b/tests/test_decode_event.py
index 655abea..f30eb87 100644
--- a/tests/test_decode_event.py
+++ b/tests/test_decode_event.py
@@ -5,15 +5,18 @@ import pytest
 from eth_event import EventError, UnknownEvent, decode_log, decode_logs
 
 
+@pytest.fixture
 def test_decode_log(log, topic_map):
     decode_log(log, topic_map)
 
 
+@pytest.fixture
 def test_decode_log_anonymous(anon_a_log, topic_map):
     with pytest.raises(EventError):
         decode_log(anon_a_log, topic_map)
 
 
+@pytest.fixture
 def test_decode_complex_event(complex_log, topic_map):
     event = decode_log(complex_log, topic_map)
     assert event["name"] == "ComplexTypesEvent"
@@ -21,10 +24,12 @@ def test_decode_complex_event(complex_log, topic_map):
     assert data == ["i am a string! such impress", "0x1234567890abcdef"]
 
 
+@pytest.fixture
 def test_decode_logs(log, complex_log, topic_map):
     decode_logs([log, complex_log], topic_map)
 
 
+@pytest.fixture
 def test_decode_logs_allow_undecoded(anon_a_log, anon_b_log, complex_log, topic_map):
     logs = [anon_a_log, complex_log, anon_b_log]
     events = decode_logs(logs, topic_map, allow_undecoded=True)
@@ -33,12 +38,14 @@ def test_decode_logs_allow_undecoded(anon_a_log, anon_b_log, complex_log, topic_
     assert len([i for i in events if i["decoded"]]) == 1
 
 
+@pytest.fixture
 def test_decode_logs_not_allow_undecoded(anon_a_log, topic_map):
     logs = [anon_a_log]
     with pytest.raises(UnknownEvent):
         decode_logs(logs, topic_map, allow_undecoded=False)
 
 
+@pytest.fixture
 def test_decode_logs_no_topic(anon_a_log, topic_map):
     logs = [anon_a_log]
     event = decode_logs(logs, topic_map, allow_undecoded=True)
@@ -57,18 +64,21 @@ def test_decode_logs_no_topic(anon_a_log, topic_map):
     ]
 
 
+@pytest.fixture
 def test_decode_insufficient(complex_log, topic_map):
     complex_log["data"] = complex_log["data"][:-20]
     with pytest.raises(EventError):
         decode_log(complex_log, topic_map)
 
 
+@pytest.fixture
 def test_decode_overflow(complex_log, topic_map):
     complex_log["data"] = "0xfffffffffffffffffffffff" + complex_log["data"][2:]
     with pytest.raises(EventError):
         decode_log(complex_log, topic_map)
 
 
+@pytest.fixture
 def test_decode_missing_topic(indexed_log, topic_map):
     indexed_log["topics"].pop()
     with pytest.raises(EventError):
diff --git a/tests/test_decode_trace.py b/tests/test_decode_trace.py
index fba76e8..8d91a54 100644
--- a/tests/test_decode_trace.py
+++ b/tests/test_decode_trace.py
@@ -17,6 +17,7 @@ def raw_trace():
     return data["result"]["structLogs"]
 
 
+@pytest.fixture
 def test_basic(topic_map, raw_trace):
     events = decode_traceTransaction(raw_trace[:400], topic_map)
     assert len(events) == 1
@@ -24,6 +25,7 @@ def test_basic(topic_map, raw_trace):
     assert [i["value"] for i in events[0]["data"]] == ["hello", "0x6689"]
 
 
+@pytest.fixture
 def test_complex(topic_map, raw_trace):
     events = decode_traceTransaction(raw_trace[400:], topic_map)
     assert len(events) == 1
@@ -37,11 +39,13 @@ def test_complex(topic_map, raw_trace):
     ]
 
 
+@pytest.fixture
 def test_multiple(topic_map, raw_trace):
     events = decode_traceTransaction(raw_trace, topic_map)
     assert len(events) == 2
 
 
+@pytest.fixture
 def test_address(topic_map, raw_trace):
     events = decode_traceTransaction(
         raw_trace, topic_map, initial_address="0x31a66f30252cb3983cb4bf10dd6cb9bf67e304d9"
@@ -50,12 +54,14 @@ def test_address(topic_map, raw_trace):
     assert events[1]["address"] == "0x31A66F30252cb3983CB4BF10Dd6cb9Bf67e304D9"
 
 
+@pytest.fixture
 def test_no_address(topic_map, raw_trace):
     events = decode_traceTransaction(raw_trace, topic_map)
     assert events[0]["address"] is None
     assert events[1]["address"] is None
 
 
+@pytest.fixture
 def test_decode_raises(topic_map, raw_trace):
     del raw_trace[371]["memory"]
     with pytest.raises(StructLogError):
