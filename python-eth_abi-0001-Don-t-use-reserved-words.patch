From: Peter Lemenkov <lemenkov@gmail.com>
Date: Fri, 2 Feb 2024 10:28:28 +0100
Subject: [PATCH] Don't use reserved words

Prevents the following errors:

```
TypeError: isinstance() arg 2 must be a type or tuple of types
```

Signed-off-by: Peter Lemenkov <lemenkov@gmail.com>

diff --git a/eth_abi/encoding.py b/eth_abi/encoding.py
index d582ac0..92a825a 100644
--- a/eth_abi/encoding.py
+++ b/eth_abi/encoding.py
@@ -327,7 +327,7 @@ class BaseFixedEncoder(NumberEncoder):
 
     @staticmethod
     def type_check_fn(value):
-        return is_number(value) and not isinstance(value, float)
+        return is_number(value) and not isinstance(value, __builtins__.float)
 
     @staticmethod
     def illegal_value_fn(value):
diff --git a/eth_abi/grammar.py b/eth_abi/grammar.py
index 0192522..59a48aa 100644
--- a/eth_abi/grammar.py
+++ b/eth_abi/grammar.py
@@ -114,7 +114,7 @@ class NodeVisitor(parsimonious.NodeVisitor):
         :returns: An instance of :class:`~eth_abi.grammar.ABIType` containing
             information about the parsed type string.
         """
-        if not isinstance(type_str, str):
+        if not isinstance(type_str, __builtins__.str):
             raise TypeError(f"Can only parse string values: got {type(type_str)}")
 
         try:
@@ -235,7 +235,7 @@ class TupleType(ABIType):
     def to_type_str(self):
         arrlist = self.arrlist
 
-        if isinstance(arrlist, tuple):
+        if isinstance(arrlist, __builtins__.tuple):
             arrlist = "".join(repr(list(a)) for a in arrlist)
         else:
             arrlist = ""
@@ -291,14 +291,14 @@ class BasicType(ABIType):
     def to_type_str(self):
         sub, arrlist = self.sub, self.arrlist
 
-        if isinstance(sub, int):
+        if isinstance(sub, __builtins__.int):
             sub = str(sub)
-        elif isinstance(sub, tuple):
+        elif isinstance(sub, __builtins__.tuple):
             sub = "x".join(str(s) for s in sub)
         else:
             sub = ""
 
-        if isinstance(arrlist, tuple):
+        if isinstance(arrlist, __builtins__.tuple):
             arrlist = "".join(repr(list(a)) for a in arrlist)
         else:
             arrlist = ""
@@ -342,17 +342,17 @@ class BasicType(ABIType):
 
         # Check validity of bytes type
         elif base == "bytes":
-            if not (sub is None or isinstance(sub, int)):
+            if not (sub is None or isinstance(sub, __builtins__.int)):
                 self.invalidate(
                     "bytes type must have either no suffix or a numerical suffix"
                 )
 
-            if isinstance(sub, int) and sub > 32:
+            if isinstance(sub, __builtins__.int) and sub > 32:
                 self.invalidate("maximum 32 bytes for fixed-length bytes")
 
         # Check validity of integer type
         elif base in ("int", "uint"):
-            if not isinstance(sub, int):
+            if not isinstance(sub, __builtins__.int):
                 self.invalidate("integer type must have numerical suffix")
 
             if sub < 8 or 256 < sub:
@@ -363,7 +363,7 @@ class BasicType(ABIType):
 
         # Check validity of fixed type
         elif base in ("fixed", "ufixed"):
-            if not isinstance(sub, tuple):
+            if not isinstance(sub, __builtins__.tuple):
                 self.invalidate(
                     "fixed type must have suffix of form <bits>x<exponent>, "
                     "e.g. 128x19",
@@ -384,7 +384,7 @@ class BasicType(ABIType):
 
         # Check validity of hash type
         elif base == "hash":
-            if not isinstance(sub, int):
+            if not isinstance(sub, __builtins__.int):
                 self.invalidate("hash type must have numerical suffix")
 
         # Check validity of address type
diff --git a/eth_abi/registry.py b/eth_abi/registry.py
index 13f078e..cf59696 100644
--- a/eth_abi/registry.py
+++ b/eth_abi/registry.py
@@ -141,7 +141,7 @@ class PredicateMapping(Copyable):
     def remove(self, predicate_or_label):
         if callable(predicate_or_label):
             self.remove_by_equality(predicate_or_label)
-        elif isinstance(predicate_or_label, str):
+        elif isinstance(predicate_or_label, __builtins__.str):
             self.remove_by_label(predicate_or_label)
         else:
             raise TypeError(
@@ -301,7 +301,7 @@ class BaseRegistry:
             mapping.add(lookup, value, label)
             return
 
-        if isinstance(lookup, str):
+        if isinstance(lookup, __builtins__.str):
             mapping.add(Equals(lookup), value, lookup)
             return
 
@@ -315,7 +315,7 @@ class BaseRegistry:
             mapping.remove_by_equality(lookup_or_label)
             return
 
-        if isinstance(lookup_or_label, str):
+        if isinstance(lookup_or_label, __builtins__.str):
             mapping.remove_by_label(lookup_or_label)
             return
 
@@ -347,7 +347,7 @@ class ABIRegistry(Copyable, BaseRegistry):
     def _get_registration(self, mapping, type_str):
         coder = super()._get_registration(mapping, type_str)
 
-        if isinstance(coder, type) and issubclass(coder, BaseCoder):
+        if isinstance(coder, __builtins__.type) and issubclass(coder, BaseCoder):
             return coder.from_type_str(type_str, self)
 
         return coder
diff --git a/eth_abi/utils/numeric.py b/eth_abi/utils/numeric.py
index acc030b..b461b5c 100644
--- a/eth_abi/utils/numeric.py
+++ b/eth_abi/utils/numeric.py
@@ -61,7 +61,7 @@ def scale_places(places: int) -> Callable[[decimal.Decimal], decimal.Decimal]:
     Returns a function that shifts the decimal point of decimal values to the
     right by ``places`` places.
     """
-    if not isinstance(places, int):
+    if not isinstance(places, __builtins__.int):
         raise ValueError(
             f"Argument `places` must be int.  Got value {places} "
             f"of type {type(places)}.",
diff --git a/eth_abi/utils/validation.py b/eth_abi/utils/validation.py
index eec9c20..7c2cb3a 100644
--- a/eth_abi/utils/validation.py
+++ b/eth_abi/utils/validation.py
@@ -15,7 +15,7 @@ def validate_bytes_param(param: Any, param_name: str) -> None:
 
 
 def validate_list_like_param(param: Any, param_name: str) -> None:
-    if not isinstance(param, (list, tuple)):
+    if not isinstance(param, (__builtins__.list, __builtins__.tuple)):
         raise TypeError(
             f"The `{param_name}` value type must be one of list or tuple. "
             f"Got {type(param)}"
diff --git a/tests/abi/test_decode.py b/tests/abi/test_decode.py
index f56045e..674fd0f 100644
--- a/tests/abi/test_decode.py
+++ b/tests/abi/test_decode.py
@@ -60,7 +60,7 @@ def test_abi_decode_for_single_dynamic_types(
 ):
     # Tests set up list values but encoders return sequences as tuples.
     # i.e. [b'\xde\xad\xbe\xef'] vs encoder return type (b'\xde\xad\xbe\xef',)
-    expected = tuple(expected) if isinstance(expected, list) else expected
+    expected = tuple(expected) if isinstance(expected, __builtins__.list) else expected
 
     abi_encoding = (
         # 32 bytes offset for dynamic types
diff --git a/tests/common/strategies.py b/tests/common/strategies.py
index 5f40631..83237e6 100644
--- a/tests/common/strategies.py
+++ b/tests/common/strategies.py
@@ -73,7 +73,7 @@ non_tuple_type_strs = st.one_of(non_array_type_strs, array_type_strs)
 
 
 def join_tuple(xs):
-    if not isinstance(xs, list):
+    if not isinstance(xs, __builtins__.list):
         return xs
 
     return f"({','.join(join_tuple(x) for x in xs)})"
@@ -238,7 +238,7 @@ single_strs_values = st.one_of(
 
 
 def to_tuple(xs):
-    if not isinstance(xs, list):
+    if not isinstance(xs, __builtins__.list):
         return xs
 
     return tuple(to_tuple(x) for x in xs)
@@ -246,7 +246,7 @@ def to_tuple(xs):
 
 def destructure_tuple_example(xs):
     def _recur(xs, type_strs, values):
-        if not isinstance(xs, list):
+        if not isinstance(xs, __builtins__.list):
             type_strs.append(xs[0])
             values.append(xs[1])
             return
diff --git a/tests/core/test_import_and_version.py b/tests/core/test_import_and_version.py
index 3fbdf94..d448412 100644
--- a/tests/core/test_import_and_version.py
+++ b/tests/core/test_import_and_version.py
@@ -1,4 +1,4 @@
 def test_import_and_version():
     import eth_abi
 
-    assert isinstance(eth_abi.__version__, str)
+    assert isinstance(eth_abi.__version__, __builtins__.str)
